---

- name: read data for creating xl_auth secret
  shell: "cat /etc/pki/tls/private/{{ inventory_hostname }}.key"
  changed_when: no
  ignore_errors: yes
  register: ssl_key_contents
  tags: xl_auth

- name: set xl_auth_secret from ssl key
  set_fact:
    xl_auth_secret: "{{ ssl_key_contents.stdout | hash('md5') }}"
  when: ssl_key_contents | success
  tags: xl_auth

- name: start postgres
  docker_container:
    name: postgres
    hostname: postgres
    image: postgres:9.4-alpine
    state: started
    restart_policy: unless-stopped
    log_driver: syslog
    log_options:
      tag: postgres
    volume_driver: local
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    env:
      POSTGRES_DB: prod
      POSTGRES_USER: xl_auth
      POSTGRES_PASSWORD: xl_auth
  tags: xl_auth

- name: start xl_auth
  docker_container:
    name: xl_auth
    hostname: "{{ xl_auth_server_name }}"
    image: "{{ xl_auth_docker }}"
    pull: yes
    command: prod_run
    state: stopped
    restart_policy: unless-stopped
    log_driver: gelf
    log_options:
      gelf-address: "{{ xl_auth_gelf_address }}"
      tag: xl_auth
      mode: non-blocking
    links:
      - postgres
    ports:
      - 5000:5000
    env:
      SERVER_NAME: "{{ xl_auth_server_name }}"
      XL_AUTH_SECRET: "{{ xl_auth_secret | default('not_secret, as fallback for `vagrant up`') }}"
      PREFERRED_URL_SCHEME: https
      FLASK_DEBUG: 0
      SQLALCHEMY_DATABASE_URI: postgresql://xl_auth:xl_auth@postgres/prod
      OAUTH2_PROVIDER_TOKEN_EXPIRES_IN: 3600
  tags: xl_auth

- name: deploy xl_auth from github
  import_tasks: xl_auth_install.yml
  tags: xl_auth

...
